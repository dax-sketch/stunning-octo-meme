name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: client_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
      run: |
        npx prisma db push
        npx prisma generate

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend unit tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
      run: npm run test -- --coverage --watchAll=false

    - name: Run backend integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
      run: npm run test -- --testPathPattern=integration --watchAll=false

    - name: Run backend performance tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
      run: npm run test -- --testPathPattern=performance --watchAll=false

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend unit tests
      working-directory: ./frontend
      env:
        CI: true
      run: npm run test -- --coverage --watchAll=false

    - name: Run frontend integration tests
      working-directory: ./frontend
      env:
        CI: true
      run: npm run test -- --testPathPattern=integration --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: client_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
      run: |
        npx prisma db push
        npx prisma generate

    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        PORT: 5000
      run: |
        npm run build
        npm start &
        sleep 10

    - name: Start frontend server
      working-directory: ./frontend
      env:
        REACT_APP_API_URL: http://localhost:5000/api
      run: |
        npm start &
        sleep 30

    - name: Run Cypress E2E tests
      working-directory: ./frontend
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:5000/api
      run: npx cypress run --headless

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots

    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run security audit - Backend
      working-directory: ./backend
      run: npm audit --audit-level=moderate

    - name: Run security audit - Frontend
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: client_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
      run: |
        npx prisma db push
        npx prisma generate

    - name: Run performance benchmarks
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/client_management_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
      run: npm run test -- --testPathPattern=performance --watchAll=false --verbose

    - name: Generate performance report
      run: |
        echo "Performance test results:" > performance-report.txt
        echo "Backend performance tests completed successfully" >> performance-report.txt

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.txt